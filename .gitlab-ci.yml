
stages:
  - test-code
  - build-feature
  - test-container
  - deploy
  - tag-master
  - release

test-node:
  stage: test-code
  image: node:14.3.0-alpine3.11
  script:
    - npm install
    - npm test
  tags:
    - docker


test-dockerfile:
  stage: test-code
  image: node:14.3.0-alpine3.11
  script:
    - npm install -g dockerlint && npm cache clean --force
    - find ./ -name Dockerfile -exec dockerlint {} \;
  tags:
    - docker

build-docker-image:
  stage: build-feature
  image: docker
  before_script:
    - apk add --no-cache py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region ${AWS_REGION})
  script:
    # For the initial build of a branch/feature site we don't want the existing master image to be rebuilt
    # Instead we want to skip image creation and use the same image used by the live site (from the master branch)
    # This statement checks for the presence of a Docker image with the same commit ref tag and skips if it exists
    - >
      if DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $REPOSITORY_URL:${CI_COMMIT_SHA:0:8} >/dev/null; then
        :
      else
        docker build --no-cache -t $CI_PROJECT_NAME:${CI_COMMIT_SHA:0:8} .
        docker tag $CI_PROJECT_NAME:${CI_COMMIT_SHA:0:8} $REPOSITORY_URL:${CI_COMMIT_SHA:0:8}
        echo $CI_PROJECT_NAME:${CI_COMMIT_SHA:0:8} >> latest_artifact.txt
        echo $REPOSITORY_URL:${CI_COMMIT_SHA:0:8} >> latest_artifact.txt
        docker push $REPOSITORY_URL:${CI_COMMIT_SHA:0:8}
      fi
  artifacts:
    paths:
      - latest_artifact.txt
    when: always
    expire_in: 30 days
  tags:
    - transparent-docker-privileged

test-docker-image:
  stage: test-container
  image: docker
  before_script:
    - apk add --no-cache py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region ${AWS_REGION})
  script:
  - docker pull $REPOSITORY_URL:${CI_COMMIT_SHA:0:8}
  - docker run $REPOSITORY_URL:${CI_COMMIT_SHA:0:8} npm test
  tags:
    - transparent-docker-privileged

deploy-feature:
  stage: deploy
  image: node:14.3.0-alpine3.11
  environment:
    name: $CI_COMMIT_REF_NAME
    url: http://$CI_COMMIT_REF_NAME.$ROOT_DOMAIN_NAME
    on_stop: delete-feature-stack
  before_script: 
    - apk add --no-cache py-pip jq
    - pip install awscli
  script:
    - aws cloudformation deploy --template-file infrastructure/fargate-app.yml --stack-name designsystem-$CI_COMMIT_REF_NAME --parameter-overrides $(cat infrastructure/test-parameters.json | jq -r '.[] | .ParameterKey + "=" + .ParameterValue') pFeatureName=$CI_COMMIT_REF_NAME pContainerImage=$REPOSITORY_URL:${CI_COMMIT_SHA:0:8} pHostedZoneName=$ROOT_DOMAIN_NAME pEnableCloudFront=$ENABLE_CLOUDFRONT --capabilities CAPABILITY_NAMED_IAM --region $AWS_REGION --no-fail-on-empty-changeset
    - >
      if [ "$ENABLE_CLOUDFRONT" == "true" ]; then
        ./infrastructure/create-invalidation.sh $CI_COMMIT_REF_NAME.$ROOT_DOMAIN_NAME
      fi
  except:
    - master
  tags:
    - docker

delete-feature-stack:
  stage: deploy
  image: node:14.3.0-alpine3.11
  variables:
    GIT_STRATEGY: none
  environment:
    name: $CI_COMMIT_REF_NAME
    action: stop
  before_script: 
    - apk add --no-cache py-pip jq
    - pip install awscli
  script:
    - aws cloudformation delete-stack --stack-name designsystem-$CI_COMMIT_REF_NAME --region $AWS_REGION && aws cloudformation wait stack-delete-complete --stack-name designsystem-$CI_COMMIT_REF_NAME --region $AWS_REGION
  except:
    - master
  when: manual
  tags:
    - docker

tag-master:
  stage: tag-master
  image: docker
  before_script:
    - apk add --no-cache py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region ${AWS_REGION})
  script:
    - docker pull $REPOSITORY_URL:${CI_COMMIT_SHA:0:8}
    - docker tag $REPOSITORY_URL:${CI_COMMIT_SHA:0:8} $REPOSITORY_URL:$CI_COMMIT_REF_NAME
    - docker push $REPOSITORY_URL:$CI_COMMIT_REF_NAME
  only:
    - master
  allow_failure: false
  tags:
    - transparent-docker-privileged

release:
  stage: release
  image: node:14.3.0-alpine3.11
  environment:
    name: live
    url: http://$ROOT_DOMAIN_NAME
  before_script: 
    - apk add --no-cache py-pip jq
    - pip install awscli
  script:
    - aws cloudformation deploy --template-file infrastructure/fargate-app.yml --stack-name designsystem-live --parameter-overrides $(cat infrastructure/live-parameters.json | jq -r '.[] | .ParameterKey + "=" + .ParameterValue') pContainerImage=$REPOSITORY_URL:${CI_COMMIT_SHA:0:8} pHostedZoneName=$ROOT_DOMAIN_NAME pEnableCloudFront=$ENABLE_CLOUDFRONT --capabilities CAPABILITY_NAMED_IAM --region $AWS_REGION --no-fail-on-empty-changeset
    - >
      if [ "$ENABLE_CLOUDFRONT" == "true" ]; then
        ./infrastructure/create-invalidation.sh $ROOT_DOMAIN_NAME
      fi
  only:
    - master
  when: manual
  allow_failure: false
  tags:
    - docker










